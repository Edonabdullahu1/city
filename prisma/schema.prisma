generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  password           String
  firstName          String?
  lastName           String?
  phone              String?
  role               UserRole             @default(USER)
  active             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  accounts           Account[]
  auditLogs          BookingAudit[]
  bookings           Booking[]
  sessions           Session[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("password_reset_tokens")
}

model Booking {
  id                String             @id @default(cuid())
  reservationCode   String             @unique
  userId            String
  status            BookingStatus      @default(SOFT)
  totalAmount       Int
  currency          String             @default("EUR")
  customerName      String?
  customerEmail     String?
  customerPhone     String?
  checkInDate       DateTime?
  checkOutDate      DateTime?
  destinationCityId String?
  notes             String?
  passengerDetails  Json?
  expiresAt         DateTime?
  confirmedAt       DateTime?
  paidAt            DateTime?
  cancelledAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  auditLogs         BookingAudit[]
  destinationCity   City?              @relation(fields: [destinationCityId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  excursions        ExcursionBooking[]
  flights           FlightBooking[]
  hotels            HotelBooking[]
  packages          PackageBooking[]
  transfers         TransferBooking[]

  @@index([destinationCityId])
  @@map("bookings")
}

model Hotel {
  id                        String           @id @default(cuid())
  name                      String
  address                   String
  cityId                    String
  category                  String
  rating                    Int
  description               String
  amenities                 String[]
  active                    Boolean          @default(true)
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  hotelId                   Int?             @unique
  slug                      String?          @unique
  primaryImage              String?
  images                    Json?            @default("[]")
  blackoutDates             BlackoutDate[]
  bookings                  HotelBooking[]
  hotelPrices               HotelPrice[]
  city                      City             @relation("HotelCity", fields: [cityId], references: [id])
  packages                  Package[]
  rooms                     Room[]
  selectedInPackageBookings PackageBooking[] @relation("PackageBookingSelectedHotel")

  @@index([cityId])
  @@index([hotelId])
  @@map("hotels")
}

model Room {
  id           String             @id @default(cuid())
  hotelId      String
  type         String
  capacity     Int
  basePrice    Int
  totalRooms   Int
  amenities    String[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  packages     Package[]
  availability RoomAvailability[]
  hotel        Hotel              @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@map("rooms")
}

model RoomAvailability {
  id             String   @id @default(cuid())
  roomId         String
  date           DateTime @db.Date
  availableRooms Int
  bookedRooms    Int      @default(0)
  priceOverride  Int?
  isBlocked      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  room           Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, date])
  @@index([date])
  @@map("room_availability")
}

model BlackoutDate {
  id        String   @id @default(cuid())
  hotelId   String
  date      DateTime @db.Date
  reason    String?
  createdAt DateTime @default(now())
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@unique([hotelId, date])
  @@map("blackout_dates")
}

model HotelPrice {
  id            String   @id @default(cuid())
  hotelId       String
  board         String
  roomType      String
  fromDate      DateTime @db.Date
  tillDate      DateTime @db.Date
  single        Decimal  @db.Decimal(10, 2)
  double        Decimal  @db.Decimal(10, 2)
  extraBed      Decimal  @db.Decimal(10, 2)
  payingKidsAge String
  paymentKids   Decimal  @db.Decimal(10, 2)
  importBatchId String
  createdAt     DateTime @default(now())
  hotel         Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId, fromDate, tillDate])
  @@index([importBatchId])
  @@map("hotel_prices")
}

model Flight {
  id                 String          @id @default(cuid())
  flightNumber       String
  originCityId       String
  destinationCityId  String
  departureAirportId String
  arrivalAirportId   String
  departureTime      DateTime
  arrivalTime        DateTime
  totalSeats         Int
  availableSeats     Int
  pricePerSeat       Int
  isBlockSeat        Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  airlineId          String
  blockGroupId       String?
  isReturn           Boolean         @default(false)
  bookings           FlightBooking[]
  airline            Airline         @relation(fields: [airlineId], references: [id])
  arrivalAirport     Airport         @relation("FlightArrivalAirport", fields: [arrivalAirportId], references: [id])
  departureAirport   Airport         @relation("FlightDepartureAirport", fields: [departureAirportId], references: [id])
  destinationCity    City            @relation("FlightDestination", fields: [destinationCityId], references: [id])
  originCity         City            @relation("FlightOrigin", fields: [originCityId], references: [id])
  departurePackages  Package[]       @relation("PackageDeparture")
  returnPackages     Package[]       @relation("PackageReturn")

  @@unique([flightNumber, departureTime])
  @@index([airlineId])
  @@index([originCityId])
  @@index([destinationCityId])
  @@index([departureAirportId])
  @@index([arrivalAirportId])
  @@map("flights")
}

model Airline {
  id        String   @id @default(cuid())
  name      String
  iataCode  String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flights   Flight[]

  @@map("airlines")
}

model Transfer {
  id          String            @id @default(cuid())
  name        String
  fromCityId  String
  toCityId    String
  fromType    String
  toType      String
  vehicleType String
  capacity    Int
  price       Int
  duration    Int
  description String?
  active      Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  packages    Package[]
  bookings    TransferBooking[]
  fromCity    City              @relation("TransferFrom", fields: [fromCityId], references: [id])
  toCity      City              @relation("TransferTo", fields: [toCityId], references: [id])

  @@index([fromCityId])
  @@index([toCityId])
  @@map("transfers")
}

model Excursion {
  id                String             @id @default(cuid())
  title             String
  description       String
  cityId            String
  duration          Int
  price             Int
  capacity          Int
  meetingPoint      String
  includes          String[]
  excludes          String[]
  images            String[]
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookings          ExcursionBooking[]
  city              City               @relation(fields: [cityId], references: [id])
  packageExcursions PackageExcursion[]

  @@index([cityId])
  @@map("excursions")
}

model FlightBooking {
  id            String    @id @default(cuid())
  bookingId     String
  flightId      String?
  flightNumber  String?
  origin        String
  destination   String
  departureDate DateTime
  arrivalDate   DateTime? // Arrival time for this flight segment
  returnDate    DateTime?
  passengers    Int       @default(1)
  class         String    @default("Economy")
  price         Int
  bookingNumber String?
  isBlockSeat   Boolean   @default(false)
  serpApiData   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  flight        Flight?   @relation(fields: [flightId], references: [id])

  @@map("flight_bookings")
}

model HotelBooking {
  id              String   @id @default(cuid())
  bookingId       String
  hotelId         String?
  hotelName       String
  roomId          String?
  roomType        String
  location        String
  checkIn         DateTime
  checkOut        DateTime
  occupancy       Int
  nights          Int
  pricePerNight   Int
  totalPrice      Int
  bookingNumber   String?
  specialRequests String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  booking         Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  hotel           Hotel?   @relation(fields: [hotelId], references: [id])

  @@map("hotel_bookings")
}

model TransferBooking {
  id            String    @id @default(cuid())
  bookingId     String
  transferId    String?
  fromLocation  String
  toLocation    String
  transferDate  DateTime
  transferTime  String
  vehicleType   String
  passengers    Int       @default(1)
  price         Int
  bookingNumber String?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  transfer      Transfer? @relation(fields: [transferId], references: [id])

  @@map("transfer_bookings")
}

model ExcursionBooking {
  id            String     @id @default(cuid())
  bookingId     String
  excursionId   String?
  title         String
  description   String?
  location      String
  excursionDate DateTime
  excursionTime String
  duration      Int
  participants  Int        @default(1)
  price         Int
  totalPrice    Int
  bookingNumber String?
  meetingPoint  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  booking       Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  excursion     Excursion? @relation(fields: [excursionId], references: [id])

  @@map("excursion_bookings")
}

model BookingAudit {
  id            String   @id @default(cuid())
  bookingId     String
  userId        String
  action        String
  changes       Json
  previousState Json?
  newState      Json?
  notes         String?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime @default(now())
  booking       Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id])

  @@index([bookingId])
  @@index([userId])
  @@index([createdAt])
  @@map("booking_audits")
}

model Country {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String   @unique
  currency  String   @default("EUR")
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]

  @@map("countries")
}

model City {
  id                 String      @id @default(cuid())
  name               String
  countryId          String
  timezone           String      @default("Europe/London")
  popular            Boolean     @default(false)
  active             Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  slug               String?     @unique
  about              String?
  profileImage       String?
  airports           Airport[]
  bookings           Booking[]
  country            Country     @relation(fields: [countryId], references: [id])
  excursions         Excursion[]
  flightDestinations Flight[]    @relation("FlightDestination")
  flightOrigins      Flight[]    @relation("FlightOrigin")
  hotelsInCity       Hotel[]     @relation("HotelCity")
  packages           Package[]
  transfersFrom      Transfer[]  @relation("TransferFrom")
  transfersTo        Transfer[]  @relation("TransferTo")

  @@unique([name, countryId])
  @@index([countryId])
  @@map("cities")
}

model Airport {
  id               String   @id @default(cuid())
  code             String   @unique
  name             String
  cityId           String
  active           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  city             City     @relation(fields: [cityId], references: [id])
  flightArrivals   Flight[] @relation("FlightArrivalAirport")
  flightDepartures Flight[] @relation("FlightDepartureAirport")

  @@index([cityId])
  @@map("airports")
}

model PackagePrice {
  id            String   @id @default(cuid())
  packageId     String
  adults        Int
  children      Int
  childAges     String
  flightPrice   Decimal  @db.Decimal(10, 2)
  hotelPrice    Decimal  @db.Decimal(10, 2)
  transferPrice Decimal  @db.Decimal(10, 2)
  totalPrice    Decimal  @db.Decimal(10, 2)
  hotelBoard    String
  roomType      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hotelName     String?
  flightBlockId String?
  nights        Int?
  package       Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId, adults, children])
  @@map("package_prices")
}

model Package {
  id                String             @id @default(cuid())
  name              String
  description       String
  cityId            String
  departureFlightId String
  returnFlightId    String
  hotelId           String
  roomId            String?
  nights            Int
  basePrice         Int       // Base price in CENTS
  maxOccupancy      Int       @default(2)
  availableFrom     DateTime
  availableTo       DateTime
  active            Boolean   @default(true)
  featured          Boolean   @default(false)
  includesTransfer  Boolean   @default(true)
  transferId        String?
  highlights        String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime @updatedAt
  flightBlockIds    Json?
  hotelIds          Json?
  profitMargin      Int?     // Stored as basis points (e.g., 1000 = 10%)
  serviceCharge     Int?     // Service charge in CENTS
  slug              String?  @unique
  primaryImage      String?
  images            Json?    @default("[]")
  info              String?
  planAndProgram    String?
  shortDescription  String?  @db.VarChar(400)
  usefulInformation String?
  whatIsIncluded    String?
  packageBookings   PackageBooking[]
  excursions        PackageExcursion[]
  packagePrices     PackagePrice[]
  city              City               @relation(fields: [cityId], references: [id])
  departureFlight   Flight             @relation("PackageDeparture", fields: [departureFlightId], references: [id])
  hotel             Hotel              @relation(fields: [hotelId], references: [id])
  returnFlight      Flight             @relation("PackageReturn", fields: [returnFlightId], references: [id])
  room              Room?              @relation(fields: [roomId], references: [id])
  transfer          Transfer?          @relation(fields: [transferId], references: [id])

  @@index([cityId])
  @@index([hotelId])
  @@map("packages")
}

model PackageExcursion {
  id          String    @id @default(cuid())
  packageId   String
  excursionId String
  included    Boolean   @default(false)
  price       Int?
  excursion   Excursion @relation(fields: [excursionId], references: [id])
  package     Package   @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([packageId, excursionId])
  @@map("package_excursions")
}

model PackageBooking {
  id                   String   @id @default(cuid())
  bookingId            String
  packageId            String
  selectedHotelId      String?
  adults               Int      @default(2)
  children             Int      @default(0)
  infants              Int      @default(0)
  checkIn              DateTime
  checkOut             DateTime
  totalPrice           Int
  selectedExcursionIds String[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  booking              Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  package              Package  @relation(fields: [packageId], references: [id])
  selectedHotel        Hotel?   @relation("PackageBookingSelectedHotel", fields: [selectedHotelId], references: [id])

  @@map("package_bookings")
}

enum UserRole {
  USER
  AGENT
  ADMIN
}

enum BookingStatus {
  SOFT
  CONFIRMED
  PAID
  CANCELLED
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String   @db.Text
  variables   String[] // Array of available variables like {{bookingCode}}, {{customerName}}
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model Page {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  content   Json     // Flexible JSON structure for page sections
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pages")
}

model ReservationSequence {
  id            Int      @id @default(1)
  currentNumber Int      @default(0) @map("current_number")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("reservation_sequence")
}

// ============================================
// SEO & Analytics Models
// ============================================

enum SeoEntityType {
  PACKAGE
  HOTEL
  CITY
  PAGE
}

model SeoMeta {
  id              String        @id @default(cuid())
  entityType      SeoEntityType
  entityId        String
  slug            String        @unique
  metaTitle       String?       @db.VarChar(70)
  metaDescription String?       @db.VarChar(160)
  canonicalUrl    String?
  noindex         Boolean       @default(false)
  nofollow        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([entityType, entityId])
  @@index([slug])
  @@index([entityType])
  @@map("seo_meta")
}

model SocialMeta {
  id                 String        @id @default(cuid())
  entityType         SeoEntityType
  entityId           String
  ogTitle            String?       @db.VarChar(70)
  ogDescription      String?       @db.VarChar(200)
  ogImage            String?
  twitterTitle       String?       @db.VarChar(70)
  twitterDescription String?       @db.VarChar(200)
  twitterImage       String?
  ogType             String        @default("website")
  twitterCard        String        @default("summary_large_image")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@unique([entityType, entityId])
  @@index([entityType])
  @@map("social_meta")
}

model SchemaTemplate {
  id           String        @id @default(cuid())
  entityType   SeoEntityType
  templateName String
  jsonldTemplate Json
  isDefault    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([entityType, templateName])
  @@map("schema_templates")
}

enum ScriptProvider {
  GOOGLE_ANALYTICS_4
  GOOGLE_TAG_MANAGER
  META_PIXEL
  TIKTOK_PIXEL
  HOTJAR
  CUSTOM
}

enum ScriptPlacement {
  HEAD_START
  HEAD_END
  BODY_START
  BODY_END
}

model TrackingScript {
  id              String          @id @default(cuid())
  name            String
  provider        ScriptProvider
  scriptId        String?         // e.g., GA4 Measurement ID, GTM Container ID
  scriptContent   String?         @db.Text // Custom script content
  placement       ScriptPlacement @default(HEAD_END)
  enabled         Boolean         @default(true)
  conditions      Json?           // JSON conditions: {pages: [], excludePages: [], userRoles: []}
  priority        Int             @default(100) // Lower numbers load first
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([enabled])
  @@index([provider])
  @@index([placement])
  @@map("tracking_scripts")
}

enum DeviceType {
  MOBILE
  DESKTOP
}

model PageSpeedSnapshot {
  id                    String     @id @default(cuid())
  url                   String
  device                DeviceType @default(MOBILE)
  performanceScore      Int?       // 0-100
  accessibilityScore    Int?       // 0-100
  bestPracticesScore    Int?       // 0-100
  seoScore              Int?       // 0-100
  // Core Web Vitals
  lcp                   Float?     // Largest Contentful Paint (seconds)
  fid                   Float?     // First Input Delay (milliseconds)
  cls                   Float?     // Cumulative Layout Shift (score)
  fcp                   Float?     // First Contentful Paint (seconds)
  tti                   Float?     // Time to Interactive (seconds)
  tbt                   Float?     // Total Blocking Time (milliseconds)
  speedIndex            Float?     // Speed Index (seconds)
  // Additional metrics
  domSize               Int?
  requestsCount         Int?
  transferSize          Int?       // bytes
  rawData               Json?      // Full PageSpeed API response
  createdAt             DateTime   @default(now())

  @@index([url])
  @@index([device])
  @@index([createdAt])
  @@index([performanceScore])
  @@map("pagespeed_snapshots")
}

model CrawlIssue {
  id            String        @id @default(cuid())
  url           String
  issueType     CrawlIssueType
  statusCode    Int?
  message       String?       @db.Text
  severity      IssueSeverity @default(MEDIUM)
  resolved      Boolean       @default(false)
  resolvedAt    DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([url])
  @@index([issueType])
  @@index([severity])
  @@index([resolved])
  @@map("crawl_issues")
}

enum CrawlIssueType {
  NOT_FOUND         // 404
  SERVER_ERROR      // 5xx
  REDIRECT_CHAIN    // Multiple redirects
  REDIRECT_LOOP     // Circular redirect
  SLOW_RESPONSE     // > 3s
  BROKEN_LINK       // Dead link
  MISSING_META      // No meta tags
  DUPLICATE_CONTENT // Same content
}

enum IssueSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Keyword {
  id              String           @id @default(cuid())
  keyword         String
  targetUrl       String?          // Optional: specific page to track
  searchVolume    Int?             // Monthly search volume
  difficulty      Int?             // Keyword difficulty (0-100)
  priority        KeywordPriority  @default(MEDIUM)
  category        String?          // Category/tag for grouping
  notes           String?          @db.Text
  enabled         Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rankings        KeywordRanking[]

  @@unique([keyword, targetUrl])
  @@index([keyword])
  @@index([enabled])
  @@index([priority])
  @@map("keywords")
}

model KeywordRanking {
  id              String   @id @default(cuid())
  keywordId       String
  keyword         Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  position        Int?     // Ranking position (null if not ranking)
  url             String?  // URL that's ranking for this keyword
  searchEngine    String   @default("google") // google, bing, etc
  location        String   @default("US") // Country/location
  device          String   @default("desktop") // desktop, mobile
  clicks          Int?     // From GSC
  impressions     Int?     // From GSC
  ctr             Float?   // Click-through rate
  checkedAt       DateTime @default(now())

  @@index([keywordId])
  @@index([checkedAt])
  @@index([position])
  @@map("keyword_rankings")
}

enum KeywordPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RedirectType {
  PERMANENT   // 301
  TEMPORARY   // 302
}

model Redirect {
  id            String       @id @default(cuid())
  sourcePath    String       @unique
  destinationPath String
  redirectType  RedirectType @default(PERMANENT)
  description   String?
  active        Boolean      @default(true)
  hitCount      Int          @default(0)
  lastHitAt     DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([sourcePath])
  @@index([active])
  @@map("redirects")
}

model RobotsConfig {
  id                String   @id @default(cuid())
  userAgent         String   @default("*")
  allowPaths        String[] // Array of allowed paths
  disallowPaths     String[] // Array of disallowed paths
  crawlDelay        Int?     // Seconds between requests
  sitemapUrl        String?  // Full sitemap URL
  customRules       String?  @db.Text // Custom robots.txt rules
  active            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("robots_config")
}

model SitemapConfig {
  id                String   @id @default(cuid())
  baseUrl           String   @default("https://city.maxtravel.al")
  includePackages   Boolean  @default(true)
  includeHotels     Boolean  @default(true)
  includeCities     Boolean  @default(true)
  includePages      Boolean  @default(true)
  defaultChangeFreq String   @default("weekly") // always, hourly, daily, weekly, monthly, yearly, never
  defaultPriority   Float    @default(0.5) // 0.0 to 1.0
  excludePaths      String[] // Array of paths to exclude from sitemap
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("sitemap_config")
}

model SeoAlertConfig {
  id                     String   @id @default(cuid())
  enabled                Boolean  @default(true)
  emailAlerts            Boolean  @default(true)
  alertEmail             String?
  slackAlerts            Boolean  @default(false)
  slackWebhookUrl        String?

  // Alert Thresholds
  performanceThreshold   Int      @default(50) // Alert if performance score drops below this
  crawlIssuesThreshold   Int      @default(5)  // Alert if unresolved issues exceed this
  keywordDropThreshold   Int      @default(10) // Alert if keyword drops more than X positions
  metaCoverageThreshold  Int      @default(70) // Alert if coverage drops below this percentage

  // Digest Settings
  weeklyDigest           Boolean  @default(true)
  digestDay              String   @default("monday") // Day of week for digest
  digestEmail            String?

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("seo_alert_config")
}

model SeoAlert {
  id          String   @id @default(cuid())
  alertType   String   // 'PERFORMANCE', 'CRAWL', 'KEYWORD', 'COVERAGE'
  severity    String   // 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL'
  title       String
  message     String   @db.Text
  data        Json?    // Additional data about the alert
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())

  @@index([alertType])
  @@index([severity])
  @@index([resolved])
  @@map("seo_alerts")
}

model SystemSettings {
  id                        String   @id @default(cuid())
  companyName               String   @default("MXi Travel Agency")
  companyEmail              String   @default("info@mxitravel.com")
  companyPhone              String   @default("+355 69 123 4567")
  companyAddress            String   @default("Tirana, Albania")
  timezone                  String   @default("Europe/Tirane")
  currency                  String   @default("EUR")
  dateFormat                String   @default("DD/MM/YYYY")
  bookingPrefix             String   @default("MXi")
  bookingHoldTime           Int      @default(180)
  autoConfirmBookings       Boolean  @default(false)
  requireApproval           Boolean  @default(true)
  maxBookingsPerDay         Int      @default(100)
  maintenanceMode           Boolean  @default(false)
  notificationEmail         String   @default("admin@mxitravel.com")
  sendBookingNotifications  Boolean  @default(true)
  sendPaymentNotifications  Boolean  @default(true)
  defaultOgImage            String?  // Default Open Graph image for social sharing
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("system_settings")
}
